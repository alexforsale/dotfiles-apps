#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:t todo:t |:t
#+title: Miscellaneous Applications
#+date: <2022-06-06 Mon>
#+author: Kristian Alexander P
#+email: alexforsale@yahoo.com
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 27.2 (Org mode 9.5.2)
#+cite_export:
#+property: EXPORT_FILE_NAME: index.html
#+startup: showall
* Misc Apps
** screenrc
   :PROPERTIES:
   :header-args: :tangle ~/.config/screen/config :mkdirp t :padline no
   :END:
*** heading
    #+begin_src conf
      # ~/.config/screen/screenrc
      # By default, screen will look for initialization in
      # either /usr/local/etc/screenrc or /etc/screenrc, or to wherever
      # the environment variable ${SYSSCREENRC} is set.
      # As for the default user configuration file is default to
      # ${HOME}/.screenrc or to ${SCREENRC} if defined.
      # so without the environment variable, this file won't be loaded.
      # As always, when in doubt, see man 1 screen
      #
      # Note: all these commands started with the escape key,
      # default to 'c-a' (ctrl-a)
    #+end_src
*** autodetach
    Don't detach screen when it receives a hangup signal. Useful for /ssh/.
    #+begin_src conf
      autodetach on # default: on
    #+end_src
*** Don't display the copyright page
    We get it, yadda yadda yadda...
    #+begin_src conf
      startup_message off # default: on
    #+end_src
*** Change the default scrollback value for new windows
    #+begin_src conf
      defscrollback 10000 # default: 100
    #+end_src
*** hardstatus
    #+begin_src conf
      hardstatus alwayslastline
      hardstatus string '%{= kG}[ %{G}%H %{g}][%= %{= kw}%?%-Lw%?%{r}(%{W}%n*%f%t%?(%u)%?%{r})%{w}%?%+Lw%?%?%= %{g}][%{B} %m-%d %{W}%c %{g}]'']'
    #+end_src
    *from the manual page*
    This command configures the use and emulation of the terminal's hardstatus line. If the flag is set to =off= these messages are overlaid in reverse video mode at the display line. The default setting is =on=.
    The second form tells screen what to do if the terminal doesn't have a hardstatus  line  (i.e.  the  termcap/terminfo capabilities "hs", "ts", "fs" and "ds" are not set). When =firstline= / =lastline= is used, screen will  reserve the first/last line of the display for the hardstatus. Message uses screen's message mechanism and ignore tells  screen  never to  display the hardstatus. If you prepend the word always to the type (e.g., =alwayslastline=), screen will use the type even if the terminal supports a hardstatus.
    The third form specifies the contents of the hardstatus line. =%h= is used as default string, i.e., the stored hardstatus of the current window  (settable  via =ESC]0;<string>^G or ESC_<string>ESC\=) is displayed. You can customize this to any string you like including the escapes from the =STRING ESCAPES= chapter. If you leave out the argument string, the current string is displayed.
*** 256 colors
    #+begin_src conf
      attrcolor b ".I"
      termcapinfo xterm 'Co#256:AB=\E[48;5;%dm:AF=\E[38;5;%dm'
      defbce on
    #+end_src
    - attrcolor :: This command can be used to highlight attributes by changing the color of the text. If the attribute attrib is in use, the specified attribute/color modifier is also applied. If no modifier is given, the current one is deleted. See the =STRING ESCAPES= chapter for the syntax of the modifier. Screen understands two pseudo-attributes, =i=  stands for high-intensity foreground color and =I= for high-intensity background color.
    - termcapinfo :: Use  this command to modify your terminal's termcap entry without going through all the hassles involved in creating a custom termcap  entry. Plus, you can optionally customize the termcap generated for the windows. You have to place these commands in one of the screenrc startup files, as they are meaningless once the terminal emulator is booted.
    - bce :: Change background-color-erase setting. If bce is set to on, all characters cleared by an erase/insert/scroll/clear operation will be displayed  in  the  current  background color. Otherwise the default background color is used.
    - defbce :: Same as the bce command except that the default setting for new windows is changed. Initial setting is =off=.
*** disable multiuser
    #+begin_src conf
      multiuser off
    #+end_src
*** butterfile
    The file to use for commands "readbuf" ('<') and  "writebuf" ('>')
    #+begin_src conf
      bufferfile ${SCREENDIR}/.screen_exchange
    #+end_src
*** shell
    Default process started in screen's windows. Makes it possible to use a different shell inside screen than is set as the default login shell. If begins with a '-' character, the shell will be started as a login shell.
    #+begin_src conf
      shell -${SHELL}
    #+end_src
*** emulate .logout message
    #+begin_src conf
      pow_detach_msg "Screen session of \$LOGNAME \$:cr:\$:nl:ended."
    #+end_src
*** ignore displays that block on output
    #+begin_src conf
      defnonblock on
    #+end_src
*** layouts
    #+begin_src conf
      layout autosave on
      layout new one
      select 1
      layout new two
      select 1
      split
      resize -v +8
      focus down
      select 4
      focus up
      layout new three
      select 1
      split
      resize -v +7
      focus down
      select 3
      split -v
      resize -h +10
      focus right
      select 4
      focus up

      layout attach one
      layout select one
    #+end_src
*** mouse tracking
    mouse tracking allows to switch region focus by clicking
    #+begin_src conf
      mousetrack on
    #+end_src
*** xterm tweaks
    Xterm understands both im/ic and doesn't have a status line. Note: Do not specify im and ic in the real termcap/info file as some programs (e.g. vi) will not work anymore.
    #+begin_src conf
      termcap  xterm hs@:cs=\E[%i%d;%dr:im=\E[4h:ei=\E[4l
      terminfo xterm hs@:cs=\E[%i%p1%d;%p2%dr:im=\E[4h:ei=\E[4
    #+end_src
*** tell screen that xterm can switch to dark background and has function keys
    #+begin_src conf
      termcapinfo xterm 'VR=\E[?5h:VN=\E[?5l'
      termcapinfo xterm 'k1=\E[11~:k2=\E[12~:k3=\E[13~:k4=\E[14~'
      termcapinfo xterm 'kh=\EOH:kI=\E[2~:kD=\E[3~:kH=\EOF:kP=\E[5~:kN=\E[6~'
    #+end_src
*** special xterm hardstatus: use the window title.
    #+begin_src conf
      termcapinfo xterm 'hs:ts=\E]2;:fs=\007:ds=\E]2;screen\007'
    #+end_src
*** advertise hardstatus support to $TERMCAP
    #+begin_src conf
      termcapinfo  * '' 'hs:ts=\E_:fs=\E\\:ds=\E_\E\\'
      termcapinfo xterm* ti@:te@
    #+end_src
*** alternate screen support
    If  set  to on, "alternate screen" support is enabled in virtual terminals, just like in xterm. Initial setting is =off=.
    #+begin_src conf
      altscreen on
    #+end_src
** rofi
   Rofi is a window switcher, application launcher, /ssh/ dialog, /dmenu/ replacement and more.
*** ~/.config/rofi/config.rasi
    :PROPERTIES:
    :header-args: :tangle ~/.config/rofi/config.rasi :mkdirp t :padline no
    :END:
**** header
     Make it so /Emacs/ will load this file as an =.css= file.
     #+begin_src css
       /* -*-css-*- */
     #+end_src
**** source wal colors
     #+begin_src css
       @theme "~/.cache/wal/colors-rofi-dark.rasi"
     #+end_src
**** configuration block
     #+begin_src css
       configuration {
           modi: "window,drun,run,ssh,combi,keys,filebrowser,windowcd";
           show-icons: true;
           font: "Fantasque Sans Mono 12";
           location: 5; /* bottom-right */
           yoffset: -40; /* just above Emacs mode-line */
           xoffset: 0;
           window-command: "wmctrl -i -R {window}";
           icon-theme: "Tango";
           drun-url-launcher: "xdg-open";
           timeout {
               action: "kb-cancel";
               delay:  0;
           }
           filebrowser {
               directories-first: true;
               sorting-method:    "name";
           }
       }
     #+end_src
*** ~/.config/rofi/themes/prompt.rasi
    :PROPERTIES:
    :header-args: :tangle ~/.config/rofi/themes/prompt.rasi :mkdirp t
    :END:
**** header
     #+begin_src css
       /* -*-css-*- */
     #+end_src
**** configuration
     #+begin_src css
       configuration {
           location: 5; /* bottom-right */
           yoffset: -40; /* just above Emacs mode-line */
           xoffset: 0;
       }
     #+end_src
**** window
     #+begin_src css
       window {
           border: 1;
           width: 15%;
           padding: 5;
           children: [ linebox ];
       }
     #+end_src
**** linebox
     #+begin_src css
       linebox {
           orientation: horizontal;
           children: [ prompt, entry, listview ];
       }
     #+end_src
**** prompt
     #+begin_src css
       prompt {
           horizontal-align: 0;
           placeholder: "huh?";
           placeholder-color: @alternate-normal-bg;
           padding: 1px;
           text-color: @normal-fg;
       }
     #+end_src
**** textbox
     #+begin_src css
       #textbox {
           blink: true;
           text-color: @foreground;
       }
       entry {
           spacing: 0;
       }
     #+end_src
**** inputbar
     #+begin_src css
       #inputbar {
           children:   [ prompt,textbox-prompt-sep,entry,case-indicator ];
       }
     #+end_src
**** textbox-prompt-sep
     #+begin_src css
       textbox-prompt-sep {
           expand:     true;
           str:        ":";
           text-color: @normal-foreground;
           margin:     0 0.3em 0 0;
       }
     #+end_src
**** entry
     #+begin_src css
       entry {
           expand: true;
           width: 1mm;
           padding: 0px 1% 3px 2%;
           text-color: @normal-foreground;
       }
     #+end_src
**** case-indicator
     #+begin_src css
       #case-indicator {
           spacing: 0;
           text-color: @normal-foreground;
       }
     #+end_src
**** listview
     #+begin_src css
       listview {
           column: 1;
           lines: 2;
           layout: vertical;
           dynamic: true;
           spacing: 5px;
       }
     #+end_src
**** button.selected
     #+begin_src css
       button.selected {
           background-color: @selected-normal-background;
           text-color: @selected-normal-foreground;
       }
     #+end_src
**** element-*
     #+begin_src css
       element-text {
           background-color: transparent;
           text-color: inherit;
           cursor: inherit;
           highlight: inherit;
       }

       element-icon {
           background-color: transparent;
           text-color: inherit;
           cursor: inherit;
           highlight: inherit;
       }

       element normal.normal {
           background-color: @normal-background;
           text-color:       @normal-foreground;
       }

       element normal.urgent {
           background-color: @urgent-background;
           text-color:       @urgent-foreground;
       }

       element normal.active {
           background-color: @active-background;
           text-color:       @active-foreground;
       }

       element selected.normal {
           background-color: @selected-normal-background;
           text-color:       @selected-normal-foreground;
       }

       element selected.urgent {
           background-color: @selected-urgent-background;
           text-color:       @selected-urgent-foreground;
       }
       element selected.active {
           background-color: @selected-active-background;
           text-color:       @selected-active-foreground;
       }
       element alternate.normal {
           background-color: @alternate-normal-background;
           text-color:       @alternate-normal-foreground;
       }
       element alternate.urgent {
           background-color: @alternate-urgent-background;
           text-color:       @alternate-urgent-foreground;
       }
       element alternate.active {
           background-color: @alternate-active-background;
           text-color:       @alternate-urgent-foreground;
       }
     #+end_src
** GnuPG
*** references
    - https://gist.github.com/mcattarinussi/834fc4b641ff4572018d0c665e5a94d3
*** ~/.gnupg/gpg-agent.conf
    :PROPERTIES:
    :header-args: :tangle ~/.gnupg/gpg-agent.conf :mkdirp t :padline no
    :END:
**** looback pinentry
     Disallow or allow clients to use the loopback pinentry features; see the option =pinentry-mode= for details. Allow is the default.
     #+begin_src conf
       allow-loopback-pinentry
     #+end_src
**** allow emacs pinentry
     Tell Pinentry to allow features to divert the passphrase entry to a running Emacs instance. How this is exactly handled depends on the version of the used Pinentry.
     #+begin_src conf
       allow-emacs-pinentry
     #+end_src
**** enable ssh-support
     #+begin_src conf
       enable-ssh-support
     #+end_src
     create a file =~/.gnupg/sshcontrol= containing the keygrip of your subkey. For easier signing using this key, add it to the =~/.ssh= directory
     #+begin_src sh :exports none :noeval :tangle no
       gpg --export-ssh-key <your id> > ~/.ssh/id_gpg.pub
     #+end_src
** xsettingsd
   :PROPERTIES:
   :header-args: :tangle ~/.config/xsettingsd/xsettingsd.conf :mkdirp t
   :END:
   [[https://github.com/derat/xsettingsd][xsettingsd]] is a daemon that implements the XSETTINGS specification.
*** Cursor Theme
    #+begin_src conf
      Gtk/CursorThemeName "ComixCursors-LH-Slim-Green"
    #+end_src
*** event sound
    #+begin_src conf
      Net/EnableEventSounds 1
    #+end_src
*** Input feedback sound
    #+begin_src conf
      Net/EnableInputFeedbackSounds 1
    #+end_src
*** icon theme
    #+begin_src conf
      Net/IconThemeName  "Papirus-Dark"
    #+end_src
*** Sound theme
    #+begin_src conf
      Net/SoundThemeName "freedesktop"
    #+end_src
*** Theme
    #+begin_src conf
      Net/ThemeName "Materia-Dark"
    #+end_src
*** antialias
    #+begin_src conf
      Xft/Antialias "1"
    #+end_src
*** DPI
    #+begin_src conf
      Xft/DPI "-1"
    #+end_src
*** HintStyle
    #+begin_src conf
      Xft/HintStyle "hintfull"
    #+end_src
*** Hinting
    #+begin_src conf
      Xft/Hinting "1"
    #+end_src
*** rgba
    #+begin_src conf
      Xft/RGBA "rgb"
    #+end_src
** gtk-3
   :PROPERTIES:
   :header-args: :tangle ~/.config/gtk-3.0/settings.ini :mkdirp t
   :END:
   #+begin_src conf
     [Setttings]
     gtk-theme-name=Materia-Dark
     gtk-icon-theme-name=Papirus-Dark
     gtk-font-name=Sans 10
     gtk-cursor-theme-name=ComixCursors-LH-Slim-Green
     gtk-cursor-theme-size=16
     gtk-toolbar-style=GTK_TOOLBAR_BOTH
     gtk-toolbar-icon-size=GTK_ICON_SIZE_LARGE_TOOLBAR
     gtk-button-images=1
     gtk-menu-images=1
     gtk-enable-event-sounds=1
     gtk-enable-input-feedback-sounds=1
     gtk-xft-antialias=1
     gtk-xft-hinting=1
     gtk-xft-hintstyle=hintfull
     gtk-xft-rgba=rgb
     gtk-application-prefer-dark-theme = true
   #+end_src
** picom
   :PROPERTIES:
   :header-args: :tangle ~/.config/picom/picom.conf :mkdirp t
   :END:
*** shadow
    #+begin_src conf
      #################################
      #             Shadows           #
      #################################


      # Enabled client-side shadows on windows. Note desktop windows
      # (windows with '_NET_WM_WINDOW_TYPE_DESKTOP') never get shadow,
      # unless explicitly requested using the wintypes option.
      #
      # shadow = false
      shadow = true;

      # The blur radius for shadows, in pixels. (defaults to 12)
      # shadow-radius = 12
      shadow-radius = 7;

      # The opacity of shadows. (0.0 - 1.0, defaults to 0.75)
      # shadow-opacity = .75

      # The left offset for shadows, in pixels. (defaults to -15)
      # shadow-offset-x = -15
      shadow-offset-x = -7;

      # The top offset for shadows, in pixels. (defaults to -15)
      # shadow-offset-y = -15
      shadow-offset-y = -7;

      # Avoid drawing shadows on dock/panel windows. This option is deprecated,
      # you should use the *wintypes* option in your config file instead.
      #
      # no-dock-shadow = false

      # Don't draw shadows on drag-and-drop windows. This option is deprecated,
      # you should use the *wintypes* option in your config file instead.
      #
      # no-dnd-shadow = false

      # Red color value of shadow (0.0 - 1.0, defaults to 0).
      # shadow-red = 0

      # Green color value of shadow (0.0 - 1.0, defaults to 0).
      # shadow-green = 0

      # Blue color value of shadow (0.0 - 1.0, defaults to 0).
      # shadow-blue = 0

      # Do not paint shadows on shaped windows. Note shaped windows
      # here means windows setting its shape through X Shape extension.
      # Those using ARGB background is beyond our control.
      # Deprecated, use
      #   shadow-exclude = 'bounding_shaped'
      # or
      #   shadow-exclude = 'bounding_shaped && !rounded_corners'
      # instead.
      #
      # shadow-ignore-shaped = ''

      # Specify a list of conditions of windows that should have no shadow.
      #
      # examples:
      #   shadow-exclude = "n:e:Notification";
      #
      # shadow-exclude = []
      shadow-exclude = [
      "name = 'Notification'",
      "class_g = 'Conky'",
      "class_g ?= 'Notify-osd'",
      "class_g = 'Cairo-clock'",
      "_GTK_FRAME_EXTENTS@:c"
      ];

      # Specify a X geometry that describes the region in which shadow should not
      # be painted in, such as a dock window region. Use
      #    shadow-exclude-reg = "x10+0+0"
      # for example, if the 10 pixels on the bottom of the screen should not have shadows painted on.
      #
      # shadow-exclude-reg = ""

      # Crop shadow of a window fully on a particular Xinerama screen to the screen.
      # xinerama-shadow-crop = false
    #+end_src
*** fading
    #+begin_src conf
      #################################
      #           Fading              #
      #################################


      # Fade windows in/out when opening/closing and when opacity changes,
      #  unless no-fading-openclose is used.
      # fading = false
      fading = true

      # Opacity change between steps while fading in. (0.01 - 1.0, defaults to 0.028)
      # fade-in-step = 0.028
      fade-in-step = 0.03;

      # Opacity change between steps while fading out. (0.01 - 1.0, defaults to 0.03)
      # fade-out-step = 0.03
      fade-out-step = 0.03;

      # The time between steps in fade step, in milliseconds. (> 0, defaults to 10)
      # fade-delta = 10

      # Specify a list of conditions of windows that should not be faded.
      # fade-exclude = []

      # Do not fade on window open/close.
      # no-fading-openclose = false

      # Do not fade destroyed ARGB windows with WM frame. Workaround of bugs in Openbox, Fluxbox, etc.
      # no-fading-destroyed-argb = false

    #+end_src
*** transparencsy
    #+begin_src conf
      #################################
      #   Transparency / Opacity      #
      #################################


      # Opacity of inactive windows. (0.1 - 1.0, defaults to 1.0)
      # inactive-opacity = 1
      inactive-opacity = 0.8;

      # Opacity of window titlebars and borders. (0.1 - 1.0, disabled by default)
      # frame-opacity = 1.0
      frame-opacity = 0.7;

      # Default opacity for dropdown menus and popup menus. (0.0 - 1.0, defaults to 1.0)
      # menu-opacity = 1.0

      # Let inactive opacity set by -i override the '_NET_WM_OPACITY' values of windows.
      # inactive-opacity-override = true
      inactive-opacity-override = false;

      # Default opacity for active windows. (0.0 - 1.0, defaults to 1.0)
      # active-opacity = 1.0

      # Dim inactive windows. (0.0 - 1.0, defaults to 0.0)
      # inactive-dim = 0.0

      # Specify a list of conditions of windows that should always be considered focused.
      # focus-exclude = []
      focus-exclude = [ "class_g = 'Cairo-clock'" ];

      # Use fixed inactive dim value, instead of adjusting according to window opacity.
      # inactive-dim-fixed = 1.0

      # Specify a list of opacity rules, in the format `PERCENT:PATTERN`,
      # like `50:name *= "Firefox"`. picom-trans is recommended over this.
      # Note we don't make any guarantee about possible conflicts with other
      # programs that set '_NET_WM_WINDOW_OPACITY' on frame or client windows.
      # example:
      #    opacity-rule = [ "80:class_g = 'URxvt'" ];
      #
      # opacity-rule = []
      opacity-rule = [ "80:class_g = 'Urxvt'",
      "80:class_g = 'Sakura'",
      "75:class_g = 'XTerm'"
      ]
    #+end_src
*** background blurring
    #+begin_src conf
      #################################
      #     Background-Blurring       #
      #################################


      # Parameters for background blurring, see the *BLUR* section for more information.
      # blur-method =
      # blur-size = 12
      #
      # blur-deviation = false
      #blur: {
      #method = "kernel";
      #size = 10;
      #background = false;
      #background-frame = false;
      #background-fixed = false;
      #}

      # Blur background of semi-transparent / ARGB windows.
      # Bad in performance, with driver-dependent behavior.
      # The name of the switch may change without prior notifications.
      #
      # blur-background = false

      # Blur background of windows when the window frame is not opaque.
      # Implies:
      #    blur-background
      # Bad in performance, with driver-dependent behavior. The name may change.
      #
      # blur-background-frame = false


      # Use fixed blur strength rather than adjusting according to window opacity.
      # blur-background-fixed = false


      # Specify the blur convolution kernel, with the following format:
      # example:
      #   blur-kern = "5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1";
      #
      # blur-kern = ''
      # blur-kern = "3x3box";


      # Exclude conditions for background blur.
      # blur-background-exclude = []
      blur-background-exclude = [
      "window_type = 'dock'",
      "window_type = 'desktop'",
      "_GTK_FRAME_EXTENTS@:c"
      ];
    #+end_src
*** general settings
    #+begin_src conf
      #################################
      #       General Settings        #
      #################################

      # Daemonize process. Fork to background after initialization. Causes issues with certain (badly-written) drivers.
      # daemon = false

      # Specify the backend to use: `xrender`, `glx`, or `xr_glx_hybrid`.
      # `xrender` is the default one.
      #
      # backend = 'glx'
      backend = "xrender";

      # Enable/disable VSync.
      # vsync = false
      # vsync = true

      # Enable remote control via D-Bus. See the *D-BUS API* section below for more details.
      # dbus = false

      # Try to detect WM windows (a non-override-redirect window with no
      # child that has 'WM_STATE') and mark them as active.
      #
      # mark-wmwin-focused = false
      mark-wmwin-focused = true;

      # Mark override-redirect windows that doesn't have a child window with 'WM_STATE' focused.
      # mark-ovredir-focused = false
      mark-ovredir-focused = true;

      # Try to detect windows with rounded corners and don't consider them
      # shaped windows. The accuracy is not very high, unfortunately.
      #
      # detect-rounded-corners = false
      detect-rounded-corners = true;

      # Detect '_NET_WM_OPACITY' on client windows, useful for window managers
      # not passing '_NET_WM_OPACITY' of client windows to frame windows.
      #
      # detect-client-opacity = false
      detect-client-opacity = true;

      # Specify refresh rate of the screen. If not specified or 0, picom will
      # try detecting this with X RandR extension.
      #
      # refresh-rate = 60
      # refresh-rate = 0

      # Limit picom to repaint at most once every 1 / 'refresh_rate' second to
      # boost performance. This should not be used with
      #   vsync drm/opengl/opengl-oml
      # as they essentially does sw-opti's job already,
      # unless you wish to specify a lower refresh rate than the actual value.
      #
      # sw-opti =

      # Use EWMH '_NET_ACTIVE_WINDOW' to determine currently focused window,
      # rather than listening to 'FocusIn'/'FocusOut' event. Might have more accuracy,
      # provided that the WM supports it.
      #
      # use-ewmh-active-win = false

      # Unredirect all windows if a full-screen opaque window is detected,
      # to maximize performance for full-screen windows. Known to cause flickering
      # when redirecting/unredirecting windows.
      #
      # unredir-if-possible = false

      # Delay before unredirecting the window, in milliseconds. Defaults to 0.
      # unredir-if-possible-delay = 0

      # Conditions of windows that shouldn't be considered full-screen for unredirecting screen.
      # unredir-if-possible-exclude = []

      # Use 'WM_TRANSIENT_FOR' to group windows, and consider windows
      # in the same group focused at the same time.
      #
      # detect-transient = false
      # detect-transient = true

      # Use 'WM_CLIENT_LEADER' to group windows, and consider windows in the same
      # group focused at the same time. 'WM_TRANSIENT_FOR' has higher priority if
      # detect-transient is enabled, too.
      #
      # detect-client-leader = false
      # detect-client-leader = true

      # Resize damaged region by a specific number of pixels.
      # A positive value enlarges it while a negative one shrinks it.
      # If the value is positive, those additional pixels will not be actually painted
      # to screen, only used in blur calculation, and such. (Due to technical limitations,
      # with use-damage, those pixels will still be incorrectly painted to screen.)
      # Primarily used to fix the line corruption issues of blur,
      # in which case you should use the blur radius value here
      # (e.g. with a 3x3 kernel, you should use `--resize-damage 1`,
      # with a 5x5 one you use `--resize-damage 2`, and so on).
      # May or may not work with *--glx-no-stencil*. Shrinking doesn't function correctly.
      #
      # resize-damage = 1

      # Specify a list of conditions of windows that should be painted with inverted color.
      # Resource-hogging, and is not well tested.
      #
      # invert-color-include = []

      # GLX backend: Avoid using stencil buffer, useful if you don't have a stencil buffer.
      # Might cause incorrect opacity when rendering transparent content (but never
      # practically happened) and may not work with blur-background.
      # My tests show a 15% performance boost. Recommended.
      #
      # glx-no-stencil = false

      # GLX backend: Avoid rebinding pixmap on window damage.
      # Probably could improve performance on rapid window content changes,
      # but is known to break things on some drivers (LLVMpipe, xf86-video-intel, etc.).
      # Recommended if it works.
      #
      # glx-no-rebind-pixmap = false

      # Disable the use of damage information.
      # This cause the whole screen to be redrawn everytime, instead of the part of the screen
      # has actually changed. Potentially degrades the performance, but might fix some artifacts.
      # The opposing option is use-damage
      #
      # no-use-damage = false
      # use-damage = true

      # Use X Sync fence to sync clients' draw calls, to make sure all draw
      # calls are finished before picom starts drawing. Needed on nvidia-drivers
      # with GLX backend for some users.
      #
      # xrender-sync-fence = false

      # GLX backend: Use specified GLSL fragment shader for rendering window contents.
      # See `compton-default-fshader-win.glsl` and `compton-fake-transparency-fshader-win.glsl`
      # in the source tree for examples.
      #
      # glx-fshader-win = ''

      # Force all windows to be painted with blending. Useful if you
      # have a glx-fshader-win that could turn opaque pixels transparent.
      #
      # force-win-blend = false

      # Do not use EWMH to detect fullscreen windows.
      # Reverts to checking if a window is fullscreen based only on its size and coordinates.
      #
      # no-ewmh-fullscreen = false

      # Dimming bright windows so their brightness doesn't exceed this set value.
      # Brightness of a window is estimated by averaging all pixels in the window,
      # so this could comes with a performance hit.
      # Setting this to 1.0 disables this behaviour. Requires --use-damage to be disabled. (default: 1.0)
      #
      # max-brightness = 1.0

      # Make transparent windows clip other windows like non-transparent windows do,
      # instead of blending on top of them.
      #
      # transparent-clipping = false

      # Set the log level. Possible values are:
      #  "trace", "debug", "info", "warn", "error"
      # in increasing level of importance. Case doesn't matter.
      # If using the "TRACE" log level, it's better to log into a file
      # using *--log-file*, since it can generate a huge stream of logs.
      #
      # log-level = "debug"
      log-level = "warn";

      # Set the log file.
      # If *--log-file* is never specified, logs will be written to stderr.
      # Otherwise, logs will to written to the given file, though some of the early
      # logs might still be written to the stderr.
      # When setting this option from the config file, it is recommended to use an absolute path.
      #
      # log-file = '/path/to/your/log/file'

      # Show all X errors (for debugging)
      # show-all-xerrors = false

      # Write process ID to a file.
      # write-pid-path = '/path/to/your/log/file'

      # Window type settings
      #
      # 'WINDOW_TYPE' is one of the 15 window types defined in EWMH standard:
      #     "unknown", "desktop", "dock", "toolbar", "menu", "utility",
      #     "splash", "dialog", "normal", "dropdown_menu", "popup_menu",
      #     "tooltip", "notification", "combo", and "dnd".
      #
      # Following per window-type options are available: ::
      #
      #   fade, shadow:::
      #     Controls window-type-specific shadow and fade settings.
      #
      #   opacity:::
      #     Controls default opacity of the window type.
      #
      #   focus:::
      #     Controls whether the window of this type is to be always considered focused.
      #     (By default, all window types except "normal" and "dialog" has this on.)
      #
      #   full-shadow:::
      #     Controls whether shadow is drawn under the parts of the window that you
      #     normally won't be able to see. Useful when the window has parts of it
      #     transparent, and you want shadows in those areas.
      #
      #   redir-ignore:::
      #     Controls whether this type of windows should cause screen to become
      #     redirected again after been unredirected. If you have unredir-if-possible
      #     set, and doesn't want certain window to cause unnecessary screen redirection,
      #     you can set this to `true`.
      #
      wintypes:
      {
      tooltip = { fade = true; shadow = true; opacity = 0.75; focus = true; full-shadow = false; };
      dock = { shadow = false; }
      dnd = { shadow = false; }
      popup_menu = { opacity = 0.8; }
      dropdown_menu = { opacity = 0.8; }
      };
    #+end_src
